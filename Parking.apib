# Group Parking

## Versioning

This API documentation relates to Parking API version 2.

All requests made to this version of the Parking API must add the following HTTP Header to the request: `X-Pbp-Version: 2`
 
## Get current or historic parking sessions [/parking/accounts/{accountId}/sessions/?periodType=Current]

## Get a user's current/historic parking sessions [GET]

**Possible Response Codes**

- 200 - OK
- 400 - Bad Request
- 401 - Unauthorized
- 403 - Forbidden

+ Request
    + Header
        Authorization: Bearer <token>


+ Parameters
    + accountId: `1b98d239-8de8-4111-9d7d-562fc31c193a` (required, string) - Parking account id.
    + periodType: 'Current' (required, enum[string]) -
        + Members
            + `Current`
            + `Historic`
    + since: `2015-09-01T16:16:00.000Z` (optional, string) - Date and time when to retrieve the parking sessions from.
    + offset: '0' (optional, int) - Offset should be more than 0.
    + limit: '10' (optional, int) - Limit should be more than 0 and less than 50.

+ Response 200
    + Attributes (application/json)
        + `parkingSessionId`:`de9bd239-44f3-483e-9fd4-7c98567da200` (string) - The parking session ID, this is needed if you want to extend an existing parking session (NOTE: this property will soon be renamed to parkingSessionId)
        + `locationId`: `5594` (string) - The Lot ID where the user is parked
        + `vehicle`: (required) - The vehicle information associated with the parking session
            + `id`: 1234 (required, int) - The ID of the vehicle that is parked.
            + `licensePlate`: `ABC123` (string) - The license plate of the vehicle that is parked
            + `jurisdiction`: `BC` (required, string) - Jurisdiciton the parked vehicle is registered in. Valid jurisdictions are Countries and Regions supported by API#Provinces
            + `countryCode`: `CA` (optional, string) - Country ISO 3166 code of the location.
            + `type`: `motorcycle` (required, string) - Vehicle Type. Valid types are: car, motorcycle, electricMotorcycle, heavyGoodsVehicle
        + `startTime`: `2015-09-01T16:16:00.000Z` (string) - The total duration of the parking session from the start-time
        + `stall`: `82445` (string) - Stall where the vehicle is parked if the parking session took place in a stall, null otherwise.
        + `rateOption`: (required) - The rate option details associated with the parking session
            + `ratePolicyId`: `5594` (required, string) - The identifier of the rate policy applied to the parking session
            + `type`: `VIS` (required, string) - The eligibility type applied to the parking session
    + Body
        [
            {
                "parkingSessionId":"de9bd239-44f3-483e-9fd4-7c98567da200",
                "locationId":"5594",
                "vehicle":{
                    "id":1234,
                    "licensePlate":"ABC123",
                    "jurisdiction":"BC",
                    "countryCode":"CA",
                    "type":"motorcycle"
                },
                "startTime":"2015-09-01T16:16:00.000Z",
                "stall":"82445",
                "rateOption":{
                    "ratePolicyId":"5594",
                    "type":"VIS"
                }
            }
        ]

## Start parking [/parking/accounts/{accountId}/sessions]

### Start a new parking session[POST]

**Possible Response Codes**

- 202 - Accepted
- 400 - Bad Request
- 401 - Unauthorized
- 403 - Forbidden

**Possible Validation Errors**

- ParkingAccountIdInvalidFormat
- LocationNotFound
- CvvRequired
- CvvInvalidFormat
- LicensePlateRequired
- LicensePlateInvalidFormat
- DurationInvalidFormat
- JsonReaderException

**Possible events**

- ParkingSessionCreated

        {
             "ParkingSessionId": "23fccd39-70c2-446f-915c-6d2362b64e58",
             "VehicleId": "12793707",
             "LocationId": "64123",
             "VehiclePlate": "GGG328",
             "Stall": "",
             "vehicleType": "car",
             "StartTime": "2015-01-28T20:54:00-0000",
             "ExpireTime": "2015-01-28T21:54:00-0000",
             "$type": "ParkingSessionCreated"
        }

- StartParkingFailed

        {
            "Data": [ ],
            "FailureReason":"VehicleAlreadyParked",
            "$type":"StartParkingFailed"
        }

+ Parameters
    + accountId: `1b98d239-8de8-4111-9d7d-562fc31c193a` (required, string) - Parking account id.

+ Request
    + Attributes (application/json)
        + `locationId`:`70000` (required, string) - The lot ID of the location where the user wants to park
        + `stall`:`1` (required, string) - The stall number of the location where the user wants to park
        + `licensePlate`:`ABC123` (required, string) - The license plate of the vehicle that is parked
        + `duration`: (required, duration) -  The duration of the parking session
            + `timeUnit`: `Minutes` (required, string) - TimeUnit Enumeration name or value. "Minutes", "Hours", "Days", "Weeks", "Months", "HalfHour", "MidnightCurrentDay", "CalendarDays", "TimeBucket", "SingleHour", "WeekdaysStartMonday", "CalendarWeeks", "NotSpecified", "Unknown"
            + `quantity`: `1` (required, string) - How many minutes or hours the user wants to park
        + `cvv`:`111` (required, string) - The CV2 code from the user's payment card
        + `startTime`:`2015-07-28T20:40:00-0000` (required, string) - The start time of the transaction to be started. Must be within 3 minutes of the current time.
        + `ratePolicyId`:`70000` (required, string) - The rate policy Id for a personalized parking session.
    + Body
        [
            {
                "locationId":"70000",
                "stall":"1",
                "licensePlate":"ABC123",
                "duration":{
                    "timeUnit":"Hours",
                    "quantity":"1"
                },
                "cvv":"111",
                "startTime": "2015-07-28T20:40:00-0000",
                "ratePolicyId":"70000"
            }
        ]

+ Response 202
    + Headers

        Location: https://api.paybyphone.com/events/workflow/d92cfe7d-dd59-49d6-be1a-a3b3bb5d3e6a


### Extend an existing parking session [PUT /parking/accounts/{accountId}/sessions/{activeParkingSessionId}]

**Possible Response Codes**

- 202 - Accepted
- 400 - Bad Request
- 401 - Unauthorized

**Possible Validation Errors**

- ParkingAccountIdInvalidFormat
- LocationNotFound
- CvvRequired
- CvvInvalidFormat
- DurationInvalidFormat
- JsonReaderException

**Possible events**

- ParkingSessionExtended

        {
             "ParkingSessionId": "23fccd39-70c2-446f-915c-6d2362b64e58",
             "VehicleId": "12793707",
             "LocationId": "64123",
             "VehiclePlate": "GGG328",
             "Stall": "",
             "vehicleType": "car",
             "OldExpiryTime": "2015-01-28T20:54:00-0000",
             "NewExpiryTime": "2015-01-28T21:54:00-0000",
             "$type": "ParkingSessionExtended"
        }

- ExtendParkingFailed

        {
            "Data": [ ],
            "FailureReason":"PaymentDeclinedByGateway",
            "$type":"ExtendParkingFailed"
        }

+ Parameters
    + accountId: `1b98d239-8de8-4111-9d7d-562fc31c193a` (required, string) - Parking account id.
    + parkingSessionId: `2bf49b64-28cd-4fc7-96e4-a44b010bf6ea` (required, string) - The ID of the parking session to be extended, this must be an active session

+ Request
    + Attributes (application/json)
        + `duration`: (required, duration) -  The duration of the parking session
            + `timeUnit`: `Minutes` (required, string) - TimeUnit Enumeration name or value. "Minutes", "Hours", "Days", "Weeks", "Months", "HalfHour", "MidnightCurrentDay", "CalendarDays", "TimeBucket", "SingleHour", "WeekdaysStartMonday", "CalendarWeeks", "NotSpecified", "Unknown"
            + `quantity`: `1` (required, string) - How many minutes or hours the user wants to park
        + `cvv`:`111` (required, string) - The CV2 code from the user's payment card
    + Headers
        Authorization: Bearer <token>
    + Body
        [
            {
                "parkingSessionId":"2bf49b64-28cd-4fc7-96e4-a44b010bf6ea",
                "duration":{
                    "timeUnit":Hours",
                    "quantity":"1"
                },
                "cvv":"111"
            }
        ]

+ Response 202
    + Headers

        Location: https://api.paybyphone.com/events/workflow/d92cfe7d-dd59-49d6-be1a-a3b3bb5d3e6a

## Manage vehicles [/parking/accounts/{accountId}/vehicles]

### Get all vehicles belonging to a parking account [GET]

Get all vehicles from a User's Account.

**Possible Response Codes**

- 200 - Ok
- 401 - Unauthorized
- 403 - Forbidden

+ Request Contract

    Header: Authorization: Bearer <token>

+ Response 200
    [
        {
            "id": "1234",
            "licensePlate": "ABC123",
            "jurisdiction": "BC",
            "countryCode": "CA",
            "type": "car"
        },
        {
            "id": "1235",
            "licensePlate": "ABC123",
            "jurisdiction": "AB",
            "countryCode": "CA",
            "type": "car"
        }
    ]

### Add a vehicle to a parking account [POST]

**Possible Response Codes**

- 202 - Accepted
- 400 - Bad Request
- 401 - Unauthorized
- 403 - Forbidden

**Possible events**

- VehicleAdded

        {
             "parkingAccountId": "23fccd39-70c2-446f-915c-6d2362b64e28",
             "vehicleId": "12793707",
             "countryCode": "CA",
             "licensePlate": "GGG328",
             "jurisdiction": "MB",
             "vehicleType": "car",
             "$type": "VehicleAdded"
        }

- AddVehicleFailed

        {
            "Data": [ {"jurisdiction": "BC"}, {"CountryId": "AU"} ],
            "FailureReason":"JurisdictionInvalidForCountry",
            "$type":"AddVehicleFailed"
        }

**Possible Validation Errors**

- LicensePlateInvalidFormat - License Plate is not a valid format. Minimum 2 characters, maximum 10 characters. A-Z and 0-9 characters only.
- LicensePlateRequired - License plate is required.
- JurisdictionNotFound - Jurisdiction not found. Valid jurisdictions are Countries and Regions supported by API#Provinces
- CountryCodeRequired - Country Code required.
- CountryCodeNotFound - Country Code not found. Valid country ids are: CA, US, GB, AU, FR, CH. See Countries and Regions supported by API#Countries
- VehicleTypeRequired - Vehicle Type is required.
- VehicleTypeNotFound - Vehicle Type not found. Valid types are: car, motorcycle, electricMotorcycle, heavyGoodsVehicle
- JsonReaderException - Provided json is in an invalid format
- JurisdictionInvalidForCountry - Provided country does not contain provided jurisdiction.

+ Request

    {
        "licensePlate":"TEST9233",
        "jurisdiction":"BC",
        "countryCode":"CA",
        "vehicleType":"car"
    }

+ Response 202 (application/json)
    + Headers

        Location: https://api.paybyphone.com/events/workflow/d92cfe7d-dd59-49d6-be1a-a3b3bb5d3e6a




## Manage a vehicle belonging to a parking account [/parking/accounts/{accountId}/vehicles/{vehicleId}]


### Update a vehicle on a parking account [PUT]

**Possible Response Codes**

- 403 - Forbidden

**Possible events**

- VehicleUpdated
        {
             "parkingAccountId": "23fccd39-70c2-446f-915c-6d2362b64e28",
             "vehicleId": "12793707",
             "countryCode": "CA",
             "licensePlate": "GGG328",
             "jurisdiction": "MB",
             "vehicleType": "motorcycle",
             "$type": "VehicleUpdated"
        }

- UpdateVehicleFailed
        {
            "Data": [ {"jurisdiction": "BC"}, {"CountryId": "AU"} ],
            "FailureReason":"JurisdictionInvalidForCountry",
            "$type":"AddVehicleFailed"
        }

**Validation Errors**

- VehicleNotFound - Vehicle with vehicle Id not found.
- LicensePlateInvalidFormat - License Plate is not a valid format. Minimum 2 characters, maximum 10 characters. A-Z and 0-9 characters only.
- LicensePlateRequired - License plate is required.
- JurisdictionNotFound - Jurisdiction not found. Valid jurisdictions are Countries and Regions supported by API#Provinces
- CountryCodeRequired - Country Code required.
- CountryCodeNotFound - Country Code not found. Valid country ids are: CA, US, GB, AU, FR, CH. See Countries and Regions supported by API#Countries
- VehicleTypeRequired - Vehicle Type is required.
- VehicleTypeNotFound - Vehicle Type not found. Valid types are: car, motorcycle, electricMotorcycle, heavyGoodsVehicle
- VehicleIdInvalidFormat - Vehicle Id must be an integer.
- UserNotRegistered - Member not registered.
- JsonReaderException - Provided json is in an invalid format.

+ Request

    Body:
        {
            "licensePlate":"TEST9233",
            "jurisdiction":"BC",
            "countryCode":"CA",
            "vehicleType":"car"
        }

+ Response 202 (application/json)
    + Headers

        Location: https://api.paybyphone.com/events/workflow/d92cfe7d-dd59-49d6-be1a-a3b3bb5d3e6a

### Delete a vehicle [DELETE]
Delete a vehicle from a parking account

**Possible Response Codes**

- 202 - Accepted
- 401 - Unauthorized
- 403 - Forbidden

**Possible events**

- VehicleDeleted
        {
             "parkingAccountId": "23fccd39-70c2-446f-915c-6d2362b64e28",
             "vehicleId": "12793707",
             "LegacyMemberUid": "18789426",
             "$type": "VehicleDeleted"
        }

- DeleteVehicleFailed
        {
            "Data": [ ],
            "FailureReason":"UserNotRegistered",
            "$type":"DeleteVehicleFailed"
        }

**Validation Errors**
- VehicleNotFound - Vehicle with vehicle Id not found.
- JsonReaderException - Provided json is in an invalid format.
- UserNotRegistered - Member not registered.
- VehicleIdInvalidFormat - Vehicle Id must be an integer.

+ Response 202 (application/json)
    + Headers

        Location: https://api.paybyphone.com/events/workflow/d92cfe7d-dd59-49d6-be1a-a3b3bb5d3e6a

## Get parking preferences for the parking account [GET /parking/accounts/{accountId}/preferences]

**Possible Response Codes**

- 200 - OK
- 400 - Bad Request
- 401 - Unauthorized
- 403 - Forbidden

**Possible Error Codes**

- EmailInvalidFormat
- JsonReaderException

+ Parameters
    + accountId: `00000000-0000-0000-0000-000000000000` (required, string) - Parking account id.

+ Response 200
    + Attributes (application/json)
        + `parkingAccountId`:`00000000-0000-0000-0000-000000000000` (string) - The parking account ID
        + `sendEmailReceipts`:`false` (string) - Does account holder wishes to get receipts from email
        + `sendTextReminders`:`false` (string) - Does account holder wishes to receive text reminder
        + `sendTextReceipts`:`false` (string) - Does account holder wishes to get receipts from text
        + `email`:`null` (string) - Email account for account holder
    + Body
        {
            "parkingAccountId":"00000000-0000-0000-0000-000000000000",
            "sendEmailReceipts":false,
            "sendTextReminders":false,
            "sendTextReceipts":false,
            "email":null
        }

## Set parking preferences for the parking account [PUT /parking/accounts/{accountId}/preferences or POST /parking/accounts/{accountId}/preferences]

**Response Codes**

- 202 - OK
- 400 - Bad Request
- 401 - Unauthorized
- 403 - Forbidden

**Possible events**

- PreferencesCreated/PreferencesUpdated

        {
             "parkingAccountId": "23fccd39-70c2-446f-915c-6d2362b64e28",
             "Email": "test@server.com",
             "SendTextReceipts": "true",
             "SendTextReminders": "true",
             "SendEmailReceipts": "true",
             "$type": "PreferencesCreated"
        }

- AddMemberPreferencesFailed or UpdateMemberPreferencesFailed

        {
            "FailureReason":"UserNotRegistered",
            "$type":"AddMemberPreferencesFailed"
        }

+ Request (application/json)
    + Body

            {
                "email":"email@-domain.com",
                "sendEmailReceipts":true,
                "sendTextReceipts":true,
                "sendTextReminders":true
            }

+ Response 202 (application/json)
    + Headers

        Location: https://api.paybyphone.com/events/workflow/d92cfe7d-dd59-49d6-be1a-a3b3bb5d3e6a

## Get or Create a parking account [/parking/accounts]

### Create a parking account for the member [POST]

**Response Codes**

- 202 - OK
- 401 - Unauthorized

**Possible events**

- ParkingAccountCreated

        {
            "ParkingAccountId":"23fccd39-70c2-446f-915c-6d2362b64e28",
            "MemberId":"23fccd39-70c2-446f-915c-6d2362b64e58",
            "$type":"ParkingAccountCreated"
        }

- CreateParkingAccountFailed

        {
            "Data": [ ],
            "FailureReason":"UserNotRegistered",
            "$type":"CreateParkingAccountFailed"
        }

+ Response 202 (application/json)
    + Headers

        Location: https://api.paybyphone.com/events/workflow/d92cfe7d-dd59-49d6-be1a-a3b3bb5d3e6a

### Get all parking accounts for the member [GET]

**Response Codes**

- 200 - OK
- 401 - Unauthorized

+ Response 200 (application/json)
    [
        {
            "id": "d6d1817e-98ee-4600-b82b-f1aace2abea5"
        }
    ]

## Get a parking quote [/parking/accounts/{parkingAccountGuid}/quote?locationId={locationId}&durationTimeUnit={TimeUnit}&durationQuantity={Quantity}&licensePlate={LicensePlate}&stall={stall}&ratePolicyId={ratePolicyId}]

### Retrieve a parking quote detail [GET]

Retrieve a parking quote detail

**Response Codes**

- 200 - Ok.
- 400 - Bad request.
- 404 - Not Found.

**Response Failure Reasons**

- LocationIdInvalidFormat - LocationId could not be converted to an integer format.
- LocationIdRequired - LocationId is required.
- LocationNotFound - No location could be found having the provided locationId.
- DurationTimeUnitRequired - You forgot you provide DurationTimeUnit
- DurationTimeUnitInvalidFormat - Time unit is not in the accepted time units enumeration.
- Value is not valid for Quantity - Error thrown when the quantity parameter could not be converted to an integer format.
- QuantityInvalidFormat - Quantity can not be zero.
- LicensePlateRequired - When getting a quote in a location that has a wait-time-after-max-stay restriction, you need to provide the license plate. This is to enforce the wait-time-after-max-stay restriction.
- CannotExtendBecauseOfNoReturnRule - When getting a quote in a location that has a wait-time-after-max-stay restriction, if you parked for the maximum stay you will need to wait until you can start parking again in
that location.
- RatePolicyIdInvalidFormat - LocationId could not be converted to an integer format.
- RatePolicyNotFound - Rate Policy Id specified is not associated with the location or the license plate.
- VehicleNotFound - Vehicle with vehicle Id not found.
- RatePolicyIdRequired - Missing RatePolicyId on the request for Start Parking
- RatePolicyIdInvalidFormat - RatePolicyId in a unsupported format such as negative number or characters
- LicensePlateRequired - License plate is required.
- LicensePlateInvalidFormat - LicensePlateInvalidFormat in a unsupported format such as negative number or characters
- StallInvalidFormat - Stall number is in an unsupported format such as a negative number or alphabetic characters
- LocationIdMustBeNullWhenParkingSessionIdSpecified - Remove LocationId from the request and keep ParkingSessionId
- RatePolicyIdMustBeNullWhenParkingSessionIdSpecified - Remove RatePolicyId from the request and keep ParkingSessionId
- LicensePlateMustBeNullWhenParkingSessionIdSpecified - Remove LicensePlate from the request and keep ParkingSessionId
- StallMustBeNullWhenParkingSessionIdSpecified - Remove Stall from the request and keep ParkingSessionId

+ Parameters
    + parkingAccountGuid: `b12e8e08-ee59-4774-8062-a40401272436` (required, guid) - GUID of the user parking account.
    + locationId: `40002` (optional, string) - Location ID. Note that this can not be a reverse lookup stall, such as in the location details endpoint
    + durationTimeUnit: `Minutes` (required, string) - Time unit enumeration string, as described in Time Units table below. Either the name or the value.
        + 1 (string) - Minutes
        + 2 (string) - Hours
        + 3 (string) - Days
        + 4 (string) - Weeks
        + 5 (string) - Months
        + 6 (string) - HalfHour
        + 7 (string) - MidnightCurrentDay
        + 8 (string) - CalendarDays
        + 9 (string) - TimeBucket
        + 10 (string) - SingleHour
        + 11 (string) - WeekdaysStartMonday
        + 12 (string) - CalendarWeeks
        + 0 (string) - NotSpecified/Unknown
        + Minutes (string)
        + Hours (string)
        + Days (string)
        + Weeks (string)
        + Months (string)
        + HalfHour (string)
        + MidnightCurrentDay (string)
        + CalendarDays (string)
        + TimeBucket (string)
        + SingleHour (string)
        + WeekdaysStartMonday (string)
        + CalendarWeeks (string)
        + NotSpecified (string)
        + Unknown (string)

    + durationQuantity: `60` (required, int) - Number of time units.
    + licensePlate: `273cvn` (optional, string) - License plate being parked. Used to calculate promotion discounts.
    + stall: `52444` (optional, string) - Stall number of the current parking session. Used for extensions to ensure the app is extending the right session.
    + ratePolicyId: `75001` (optional, int) - The ID of the rate policy you want to use

+ Response
    + Attributes
        + locationId: `40006` (int) - The Location ID where the user is parked.
        + stall: `123` (string)  - Stall where the vehicle is parked if the parking session took place in a stall, null otherwise.
        + quoteDate: `2015-06-25T18:00:00-0000` (dateTime)  - Quote Time of the rate calculation, in UTC
        + totalCost: (money) - Total cost of the parkfig session
            + amount
            + currency
        + parkingAccountId:  `56514ff5-44fc-463b-820f-1d47393e1703` (guid)
        + parkingStartTime: `2014-12-29T22:00:00-0000` (dateTime)  - Parking Start Time of the rate calculation, in UTC
        + parkingExpiryTime: `2014-12-29T23:00:00-0000` (dateTime)  - Parking Expiry Time of the rate calculation, in UTC
        + parkingDurationAdjustment: `NotAdjusted` (enum)
            + NotAdjusted
            + DurationIncreased
            + DurationDecreased
        + licensePlate: `ABC123` (string) - The license plate of the vehicle that is parked
        + quoteItems : (array[string])
            + quoteItemType
                + promotion
            + name
            + costAmount
                + amount
                + currency

+ Response 200 (application/json)
    Content-Type: application/json

    {
        "locationId": "40006",
        "stall": "123",
        "quoteDate":"2015-06-25T18:00:00-0000",
        "totalCost": {
               "amount": 5.00,
               "currency": "CAD"
        },
        "parkingAccountId": "56514ff5-44fc-463b-820f-1d47393e1703",
        "parkingStartTime": "2014-12-29T22:00:00-0000",
        "parkingExpiryTime": "2014-12-29T23:00:00-0000",
        "patrkingDurationAdjustment": "NotAdjusted",
        "licensePlate": "ABC123",
        "quoteItems":[{
            "quoteItemType":"parking",
            "name": "Parking",
            "costAmout":{
                "amount":9.00,
                "currency":"CAD"
            }
        },{
            "quoteItemType":"convenienceFee",
            "name": "Convenience Fee",
            "costAmount": {
                "amount": 1.00,
                "currency": "CAD"
            }
        },{
            "quoteItemType":"promotion",
            "name": "COV electric vehicle discount.",
            "costAmount": {
                "amount": -5.00,
                "currency": "CAD"
            }
        }]
    }

## Get a parking extension quote [/parking/accounts/{parkingAccountGuid}/quote?durationTimeUnit={DurationTimeUnit}&durationQuantity={DurationQuantity}&parkingSessionId={parkingSessionId}]

### Retrieve a parking extension quote [GET]

Retrieve a parking extension quote detail

**Response Codes**

- 200 - Ok
- 400 - Bad request
- 404 - Not Found

**Response Failure Reasons**

- DurationTimeUnitRequired - You forgot you provide DurationTimeUnit
- DurationTimeUnitInvalidFormat - Time unit is not in the accepted time units enumeration.
- Value is not valid for Quantity - Error thrown when the quantity parameter could not be converted to an integer format.
- QuantityInvalidFormat - Quantity can not be zero.
- LocationIdMustBeNullWhenParkingSessionIdSpecified - Remove LocationId from the request and keep ParkingSessionId
- RatePolicyIdMustBeNullWhenParkingSessionIdSpecified - Remove RatePolicyId from the request and keep ParkingSessionId
- LicensePlateMustBeNullWhenParkingSessionIdSpecified - Remove LicensePlate from the request and keep ParkingSessionId
- StallMustBeNullWhenParkingSessionIdSpecified - Remove Stall from the request and keep ParkingSessionId

+ Parameters
    + parkingAccountGuid: `b12e8e08-ee59-4774-8062-a40401272436` (required, guid) - GUID of the user parking account.
    + durationTimeUnit: `Minutes` (required, string) - Time unit enumeration string, as described in Time Units table below. Either the name or the value.
        + 1 (string) - Minutes
        + 2 (string) - Hours
        + 3 (string) - Days
        + 4 (string) - Weeks
        + 5 (string) - Months
        + 6 (string) - HalfHour
        + 7 (string) - MidnightCurrentDay
        + 8 (string) - CalendarDays
        + 9 (string) - TimeBucket
        + 10 (string) - SingleHour
        + 11 (string) - WeekdaysStartMonday
        + 12 (string) - CalendarWeeks
        + 0 (string) - NotSpecified/Unknown
        + Minutes (string)
        + Hours (string)
        + Days (string)
        + Weeks (string)
        + Months (string)
        + HalfHour (string)
        + MidnightCurrentDay (string)
        + CalendarDays (string)
        + TimeBucket (string)
        + SingleHour (string)
        + WeekdaysStartMonday (string)
        + CalendarWeeks (string)
        + NotSpecified (string)
        + Unknown (string)

    + durationQuantity: `60` (required, int) - Number of time units.
    + parkingSessionId: `b12e8e08-ee59-4774-8062-a40401272436` (optional, Guid) - The parkingSessionId used for extension. Is present, means it's an Extension Quote. Location, Stall, RatePolicyId,

+ Response
    + Attributes
        + locationId: `40006` (int) - The Location ID where the user is parked.
        + stall: `123` (string)  - Stall where the vehicle is parked if the parking session took place in a stall, null otherwise.
        + quoteDate: `2015-06-25T18:00:00-0000` (dateTime)  - Quote Time of the rate calculation, in UTC
        + totalCost: (money) - Total cost of the parkfig session
            + amount
            + currency
        + parkingAccountId:  `56514ff5-44fc-463b-820f-1d47393e1703` (guid)
        + parkingStartTime: `2014-12-29T22:00:00-0000` (dateTime)  - Parking Start Time of the rate calculation, in UTC
        + parkingExpiryTime: `2014-12-29T23:00:00-0000` (dateTime)  - Parking Expiry Time of the rate calculation, in UTC
        + parkingDurationAdjustment: `NotAdjusted` (enum)
            + NotAdjusted
            + DurationIncreased
            + DurationDecreased
        + licensePlate: `ABC123` (string) - The license plate of the vehicle that is parked
        + quoteItems : (array[string])
            + quoteItemType
                + promotion
            + name
            + costAmount
                + amount
                + currency

+ Response 200 (application/json)
    Content-Type: application/json

    {
        "locationId": "40006",
        "stall": "123",
        "quoteDate":"2015-06-25T18:00:00-0000",
        "totalCost": {
               "amount": 5.00,
               "currency": "CAD"
        },
        "parkingAccountId": "56514ff5-44fc-463b-820f-1d47393e1703",
        "parkingStartTime": "2014-12-29T22:00:00-0000",
        "parkingExpiryTime": "2014-12-29T23:00:00-0000",
        "patrkingDurationAdjustment": "NotAdjusted",
        "licensePlate": "ABC123",
        "quoteItems":[{
            "quoteItemType":"parking",
            "name": "Parking",
            "costAmout":{
                "amount":9.00,
                "currency":"CAD"
            }
        },{
            "quoteItemType":"convenienceFee",
            "name": "Convenience Fee",
            "costAmount": {
                "amount": 1.00,
                "currency": "CAD"
            }
        },{
            "quoteItemType":"promotion",
            "name": "COV electric vehicle discount.",
            "costAmount": {
                "amount": -5.00,
                "currency": "CAD"
            }
        }]
    }

## Get details parking rates [/parking/locations/{locationId}/ratePolicies?plates={list of license plates}]

### Get details about what rate policies can be applied at a location to the user's vehicles [GET]

**Response Failure Reasons**

-LocationIdInvalidFormat - LocationId could not be converted to an integer format.

+ Request
    Header: Authorization: Bearer <token>

+ Parameters
    + plates: `ABC123` (required, string) - License plates to get the rate policies for (different vehicles may be eligible for different parking rates).

+ Response 200 (application/json)
    Content-Type: application/json
    [
      {
        "ratePolicyId": 75001,
        "name": "Visiteur",
        "eligibilityType": "VIS",
        "isDefault": true,
        "eligiblePlates": [
          {
            "plate": "ABC123",
            "eligibleSectors": [
              "1E"
            ]
          }
        ]
      }
    ]

## Parking location search [/parking/locations/?advertisedLocationNumber={advertisedLocationNumber}&countryCode={countryCode}&stall={stall}]

### Find zero or more locations' details [GET]

**Response codes**
- 200 - OK
- 400 - Bad Request
- 404 - Not Found
- 500 - Internal Server Error

**Max Stays Remarks and Examples**
- MaxStayCouldNotBeVerified - The maximum stay could not be accurately determined. The app should not show any message regarding max stay at the parking step, before the user enters duration.
- NoMaxStay - The location does not have a max stay. User can park for any duration. The app should not show any message regarding max stay at the parking step, before the user enters duration.
- ParkingAllowed currentMaxStayInSeconds: 7200 - User can only park for 7200 seconds. The app is safe to show a message regarding this limit.
- ParkingAllowed currentMaxStayInSeconds: 0 - Even though parking is allowed, we could not accurately determine the exact maximum allowed duration. The app should not show any message regarding max stay at the parking step, before the user enters duration.
- ParkingNotAllowed - Parking is not allowed at the time of calling this endpoint. The app is safe to show a "no parking at this time" message.

+ Request
    Header: Authorization: Bearer <token>

+ Parameters
    + advertisedLocationNumber: `10` (required, string) - Can either be a Lot ID or a Stall, if the location supports reverse lookup.
    + countryCode: `CA` (optional, string) - Country ISO 3166 code of the location.
    + stall: `1` (optional, string) - If the location is stallbased then you can pass the stall number either to verify its existence or to get the location in case the stall belongs to another lot in the same group.

+ Response
    + Attributes
        + status: `lotOpen` (enum) - Enumeration. Valid items are
            + lotOpen
            + lotClosed
            + lotYetToBeActivated
        + lotMessages: (string) - A collection if key/value pairs that contain messages and the culture they belong to.

+ Response 200
    Content-Type: application/json
        [{
            "locationId": "12345",
            "name": "344th Street",
            "vendorName": "COV",
            "status": "lotOpen",
            "allowExtend": "false",
            "isStallBased": "true",
            "isPlateBased": "false",
            "currency": "CAD",
            "countryCode": "CA",
            "promptForCvv": "true",
            "lotMessages": [],
            "stall": 123,
            "isReverseLookup": "true",
            "acceptedPaymentTypes": [
                "Visa",
                "Mastercard",
                "Amex",
                "DebitCard",
                "Discover",
                "PaypointCash"
            ]
        }]

## Parking location details [/parking/locations/{locationId}]

### Get an individual location's details [GET]

**Response codes**
- 200 - OK
- 400 - Bad Request
- 404 - Not Found
- 500 - Internal Server Error

**Max Stays Remarks and Examples**
- MaxStayCouldNotBeVerified - The maximum stay could not be accurately determined. The app should not show any message regarding max stay at the parking step, before the user enters duration.
- NoMaxStay - The location does not have a max stay. User can park for any duration. The app should not show any message regarding max stay at the parking step, before the user enters duration.
- ParkingAllowed currentMaxStayInSeconds: 7200 - User can only park for 7200 seconds. The app is safe to show a message regarding this limit.
- ParkingAllowed currentMaxStayInSeconds: 0 - Even though parking is allowed, we could not accurately determine the exact maximum allowed duration. The app should not show any message regarding max stay at the parking step, before the user enters duration.
- ParkingNotAllowed - Parking is not allowed at the time of calling this endpoint. The app is safe to show a "no parking at this time" message.

+ Request
    Header: Authorization: Bearer <token>

+ Parameters
    + locationId: `10` (required, string) - Must be a valid locationId.
    + stall: `1` (optional, string) - provide a specific stall for locations with multiple stalls

+ Response
    + Attributes
        + status: `lotOpen` (enum) - Enumeration. Valid items are
            + lotOpen
            + lotClosed
            + lotYetToBeActivated
        + lotMessages: (string) - A collection if key/value pairs that contain messages and the culture they belong to.

+ Response 200
    Content-Type: application/json
        {
            "locationId": "12345",
            "name": "344th Street",
            "vendorName": "COV",
            "status": "lotOpen",
            "allowExtend": "false",
            "isStallBased": "true",
            "isPlateBased": "false",
            "currency": "CAD",
            "countryCode": "CA",
            "promptForCvv": "true",
            "lotMessages": [],
            "stall": 123,
            "isReverseLookup": "false",
            "acceptedPaymentTypes": [
                "Visa",
                "Mastercard",
                "Amex",
                "DebitCard",
                "Discover",
                "PaypointCash"
            ]
        }

## Parking Rate Options [/parking/locations/{locationId}/rateOptions?parkingAccountId={parkingAccountId}&licensePlate={licensePlate}&parkingSessionId={parkingSessionId}&startTime={startTime}]

### Get a Parking Rate Option [GET]

To get the available parking rate option(s) for use when:
- Starting a parking session at a given location: Call this endpoint with the desired combination of parameters, restricted as per the section below.
- Extending an active parking session: Call this endpoint with only `parkingAccountId` and `parkingSessionId`.

**Parameter combination restrictions**

This endpoint supports a number of optional parameters, some of which must be provided in combination with (and/or to the exclusion of) other specific parameters:
- When providing a `licensePlate` parameter value
    - a valid `parkingAccountId` must be provided
    - a `parkingSessionId` must *not* be provided
- When providing a `parkingSessionId` parameter value
    - a valid `parkingAccountId` must be provided
    - a `licensePlate` must *not* be provided
    - a `startTime` must *not* be provided


**Response codes**

- 200 - OK
- 400 - Bad Request
    - When getting parking rate options in order to start a parking session, the following failure reasons may be returned
        - LicensePlateRequired
    - When getting parking rate options in order to start or extend a parking session, the following failure reasons may be returned
        - LocationIdRequired
        - LocationIdInvalidFormat
        - ParkingAccountIdRequired
        - ParkingAccountIdInvalidFormat
    - When getting parking rate options in order to extend a parking session, the following failure reasons my be returned
        - LicensePlateMustBeNullWhenParkingSessionIdSpecified
        - StartTimeMustBeNullWhenParkingSessionIdSpecified
        - ActiveParkingSessionNotFound
        - ActiveParkingSessionForLocationNotFound
- 401 - Unauthorized
- 403 - Forbidden
- 404 - Not Found

**Remarks**

`/rateOptions` endpoint consumes the underlying `/restrictions` endpoint and will behave according to what it receives back from `/restrictions`:
- When `maxStayStatus` is `parkingAllowed`
    - `maxStayDuration` should have a `durationType` and `quantity`
    - `acceptedTimeUnits` should have the accepted time units.

- When `maxStayStatus` is `noMaxStay` then:
    - `maxStayDuration` is null
    - `acceptedTimeUnits` is should have the accepted time units

- When `maxStayStatus` is `parkingNotAllowed`
    - `maxStayDuration` is null
    - `acceptedTimeUnits` is null

+ Request
    Header: Authorization: Bearer <token>

+ Parameters
    + locationId: `75001` (required, string) - LocationId in the database
    + parkingAccountId: `b12e8e08-ee59-4774-8062-a40401272436` (optional, guid)
    + licensePlate: `ABC123` (optional, guid) - The license plate. When you provide a license plate you *must* provide a `parkingAccountId`
    + parkingSessionId: `b12e8e08-ee59-4774-8062-a404d3c4fb4d` (optional, guid) - The id of the currently-active parking session for which the applicable rate option is to be retrieved

+ Response
    + Attributes
        + name: The name of the eligibility
        + type: The type of the eligibility
        + ratePolicyId: The ID of the rate policy
        + maxStayDuration:
            + durationType: The time unit of the duration
            + quantity: The amount of time units of the duration
        + maxStayStatus: The status of the max stay
        + acceptedTimeUnits: (array[string]) The time units accepted for this rate option
        + isDefault: (boolean) If it is the default rate option

+ Response 200 (application/json)
    Content-Type: application/json

    [
        {
            "name": "Professionel",
            "type": "PRO",
            "ratePolicyId": "75001",
            "maxStayDuration": {
              "durationType": "Minute",
              "quantity": 150
            },
            "maxStayStatus": "ParkingAllowed",
            "acceptedTimeUnits": [
                "Minutes",
                "Hours"
            ],
            "isDefault": false
      },
      {
            "name": "Visiteur",
            "type": "VIS",
            "ratePolicyId": "75001",
            "maxStayDuration": {
                "durationType": "Minute",
                "quantity": 120
            },
            "maxStayStatus": "ParkingAllowed",
            "acceptedTimeUnits": [
            "Minutes",
            "Hours"
            ],
            "isDefault": true
      }
    ]
